import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score

dataset = pd.read_csv('diabetes.csv')
print (len(dataset))
print (dataset.head())

#data Preprocessing
zero_not_accepted = ['Glucose','BloodPressure','SkinThickness','BMI','Insulin']
for column in zero_not_accepted:
    dataset[column] = dataset[column].replace(0,np.NaN)
    mean = int(dataset[column].mean(skipna=True))
    dataset[column] = dataset[column].replace(np.NaN,mean)

#split dataset
x = dataset.iloc[: , 0:8]
y = dataset.iloc[:, 8 ]
X_train , X_test , y_train , y_test = train_test_split(x,y,random_state=0,test_size=0.2)

#Feature scaling
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#Define the model :Init K-NN
classifier = KNeighborsClassifier(n_neighbors = 11,p=2 , metric = 'euclidean')
classifier.fit(X_train,y_train)

#Predict the test result
y_predict = classifier.predict(X_test)
print(y_predict)

#Evaluate the model
cm = confusion_matrix(y_test , y_predict)
print(cm)
print(f1_score(y_test,y_predict))
print(accuracy_score(y_test,y_predict))
